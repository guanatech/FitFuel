// <auto-generated />
using System;
using Fitfuel.Profiles.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fitfuel.Profiles.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ProfilesDbContext))]
    partial class ProfilesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("profiles")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fitfuel.Profiles.Domain.AchievementAggregate.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("achievements", "profiles");
                });

            modelBuilder.Entity("Fitfuel.Profiles.Domain.ProfileAggregate.Entities.ProfileAchievement", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("ProfileId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("profile_achievements", "profiles");
                });

            modelBuilder.Entity("Fitfuel.Profiles.Domain.ProfileAggregate.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("MainPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("profiles", "profiles");
                });

            modelBuilder.Entity("Fitfuel.Profiles.Domain.ProfileAggregate.Entities.ProfileAchievement", b =>
                {
                    b.HasOne("Fitfuel.Profiles.Domain.AchievementAggregate.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitfuel.Profiles.Domain.ProfileAggregate.Profile", "Profile")
                        .WithMany("ProfileAchievements")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Fitfuel.Profiles.Domain.ProfileAggregate.Profile", b =>
                {
                    b.OwnsOne("Fitfuel.Profiles.Domain.ProfileAggregate.ValueObjects.Height", "Height", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Unit")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("ProfileId");

                            b1.ToTable("profiles", "profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("Fitfuel.Profiles.Domain.ProfileAggregate.ValueObjects.Weight", "Weight", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Unit")
                                .HasColumnType("integer");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision");

                            b1.HasKey("ProfileId");

                            b1.ToTable("profiles", "profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("Height")
                        .IsRequired();

                    b.Navigation("Weight")
                        .IsRequired();
                });

            modelBuilder.Entity("Fitfuel.Profiles.Domain.ProfileAggregate.Profile", b =>
                {
                    b.Navigation("ProfileAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
